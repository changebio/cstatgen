# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_egglib_binding', [dirname(__file__)])
        except ImportError:
            import _egglib_binding
            return _egglib_binding
        if fp is not None:
            try:
                _mod = imp.load_module('_egglib_binding', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _egglib_binding = swig_import_helper()
    del swig_import_helper
else:
    import _egglib_binding
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _egglib_binding.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _egglib_binding.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _egglib_binding.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _egglib_binding.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _egglib_binding.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _egglib_binding.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _egglib_binding.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _egglib_binding.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _egglib_binding.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _egglib_binding.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _egglib_binding.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _egglib_binding.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _egglib_binding.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _egglib_binding.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _egglib_binding.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _egglib_binding.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _egglib_binding.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _egglib_binding.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectors self) -> SwigPyIterator"""
        return _egglib_binding.vectors_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectors self) -> bool"""
        return _egglib_binding.vectors___nonzero__(self)

    def __bool__(self):
        """__bool__(vectors self) -> bool"""
        return _egglib_binding.vectors___bool__(self)

    def __len__(self):
        """__len__(vectors self) -> std::vector< std::string >::size_type"""
        return _egglib_binding.vectors___len__(self)

    def pop(self):
        """pop(vectors self) -> std::vector< std::string >::value_type"""
        return _egglib_binding.vectors_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectors"""
        return _egglib_binding.vectors___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            vectors v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _egglib_binding.vectors___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _egglib_binding.vectors___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectors self, std::vector< std::string >::difference_type i)
        __delitem__(vectors self, PySliceObject * slice)
        """
        return _egglib_binding.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectors self, PySliceObject * slice) -> vectors
        __getitem__(vectors self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _egglib_binding.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectors self, PySliceObject * slice, vectors v)
        __setitem__(vectors self, PySliceObject * slice)
        __setitem__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _egglib_binding.vectors___setitem__(self, *args)

    def append(self, *args):
        """append(vectors self, std::vector< std::string >::value_type const & x)"""
        return _egglib_binding.vectors_append(self, *args)

    def empty(self):
        """empty(vectors self) -> bool"""
        return _egglib_binding.vectors_empty(self)

    def size(self):
        """size(vectors self) -> std::vector< std::string >::size_type"""
        return _egglib_binding.vectors_size(self)

    def clear(self):
        """clear(vectors self)"""
        return _egglib_binding.vectors_clear(self)

    def swap(self, *args):
        """swap(vectors self, vectors v)"""
        return _egglib_binding.vectors_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectors self) -> std::vector< std::string >::allocator_type"""
        return _egglib_binding.vectors_get_allocator(self)

    def begin(self):
        """begin(vectors self) -> std::vector< std::string >::iterator"""
        return _egglib_binding.vectors_begin(self)

    def end(self):
        """end(vectors self) -> std::vector< std::string >::iterator"""
        return _egglib_binding.vectors_end(self)

    def rbegin(self):
        """rbegin(vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _egglib_binding.vectors_rbegin(self)

    def rend(self):
        """rend(vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _egglib_binding.vectors_rend(self)

    def pop_back(self):
        """pop_back(vectors self)"""
        return _egglib_binding.vectors_pop_back(self)

    def erase(self, *args):
        """
        erase(vectors self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectors self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _egglib_binding.vectors_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> vectors
        __init__(std::vector<(std::string)> self, vectors arg2) -> vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectors
        """
        this = _egglib_binding.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectors self, std::vector< std::string >::value_type const & x)"""
        return _egglib_binding.vectors_push_back(self, *args)

    def front(self):
        """front(vectors self) -> std::vector< std::string >::value_type const &"""
        return _egglib_binding.vectors_front(self)

    def back(self):
        """back(vectors self) -> std::vector< std::string >::value_type const &"""
        return _egglib_binding.vectors_back(self)

    def assign(self, *args):
        """assign(vectors self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _egglib_binding.vectors_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectors self, std::vector< std::string >::size_type new_size)
        resize(vectors self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _egglib_binding.vectors_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _egglib_binding.vectors_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectors self, std::vector< std::string >::size_type n)"""
        return _egglib_binding.vectors_reserve(self, *args)

    def capacity(self):
        """capacity(vectors self) -> std::vector< std::string >::size_type"""
        return _egglib_binding.vectors_capacity(self)

    __swig_destroy__ = _egglib_binding.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _egglib_binding.vectors_swigregister
vectors_swigregister(vectors)

class vectori(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectori self) -> SwigPyIterator"""
        return _egglib_binding.vectori_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectori self) -> bool"""
        return _egglib_binding.vectori___nonzero__(self)

    def __bool__(self):
        """__bool__(vectori self) -> bool"""
        return _egglib_binding.vectori___bool__(self)

    def __len__(self):
        """__len__(vectori self) -> std::vector< int >::size_type"""
        return _egglib_binding.vectori___len__(self)

    def pop(self):
        """pop(vectori self) -> std::vector< int >::value_type"""
        return _egglib_binding.vectori_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectori"""
        return _egglib_binding.vectori___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectori v=std::vector< int,std::allocator< int > >())
        __setslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _egglib_binding.vectori___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _egglib_binding.vectori___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectori self, std::vector< int >::difference_type i)
        __delitem__(vectori self, PySliceObject * slice)
        """
        return _egglib_binding.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectori self, PySliceObject * slice) -> vectori
        __getitem__(vectori self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _egglib_binding.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectori self, PySliceObject * slice, vectori v)
        __setitem__(vectori self, PySliceObject * slice)
        __setitem__(vectori self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _egglib_binding.vectori___setitem__(self, *args)

    def append(self, *args):
        """append(vectori self, std::vector< int >::value_type const & x)"""
        return _egglib_binding.vectori_append(self, *args)

    def empty(self):
        """empty(vectori self) -> bool"""
        return _egglib_binding.vectori_empty(self)

    def size(self):
        """size(vectori self) -> std::vector< int >::size_type"""
        return _egglib_binding.vectori_size(self)

    def clear(self):
        """clear(vectori self)"""
        return _egglib_binding.vectori_clear(self)

    def swap(self, *args):
        """swap(vectori self, vectori v)"""
        return _egglib_binding.vectori_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectori self) -> std::vector< int >::allocator_type"""
        return _egglib_binding.vectori_get_allocator(self)

    def begin(self):
        """begin(vectori self) -> std::vector< int >::iterator"""
        return _egglib_binding.vectori_begin(self)

    def end(self):
        """end(vectori self) -> std::vector< int >::iterator"""
        return _egglib_binding.vectori_end(self)

    def rbegin(self):
        """rbegin(vectori self) -> std::vector< int >::reverse_iterator"""
        return _egglib_binding.vectori_rbegin(self)

    def rend(self):
        """rend(vectori self) -> std::vector< int >::reverse_iterator"""
        return _egglib_binding.vectori_rend(self)

    def pop_back(self):
        """pop_back(vectori self)"""
        return _egglib_binding.vectori_pop_back(self)

    def erase(self, *args):
        """
        erase(vectori self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectori self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _egglib_binding.vectori_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> vectori
        __init__(std::vector<(int)> self, vectori arg2) -> vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectori
        """
        this = _egglib_binding.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectori self, std::vector< int >::value_type const & x)"""
        return _egglib_binding.vectori_push_back(self, *args)

    def front(self):
        """front(vectori self) -> std::vector< int >::value_type const &"""
        return _egglib_binding.vectori_front(self)

    def back(self):
        """back(vectori self) -> std::vector< int >::value_type const &"""
        return _egglib_binding.vectori_back(self)

    def assign(self, *args):
        """assign(vectori self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _egglib_binding.vectori_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectori self, std::vector< int >::size_type new_size)
        resize(vectori self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _egglib_binding.vectori_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectori self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectori self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _egglib_binding.vectori_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectori self, std::vector< int >::size_type n)"""
        return _egglib_binding.vectori_reserve(self, *args)

    def capacity(self):
        """capacity(vectori self) -> std::vector< int >::size_type"""
        return _egglib_binding.vectori_capacity(self)

    __swig_destroy__ = _egglib_binding.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _egglib_binding.vectori_swigregister
vectori_swigregister(vectori)

class vectorui(_object):
    """Proxy of C++ std::vector<(unsigned int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorui, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorui self) -> SwigPyIterator"""
        return _egglib_binding.vectorui_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorui self) -> bool"""
        return _egglib_binding.vectorui___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorui self) -> bool"""
        return _egglib_binding.vectorui___bool__(self)

    def __len__(self):
        """__len__(vectorui self) -> std::vector< unsigned int >::size_type"""
        return _egglib_binding.vectorui___len__(self)

    def pop(self):
        """pop(vectorui self) -> std::vector< unsigned int >::value_type"""
        return _egglib_binding.vectorui_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorui self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> vectorui"""
        return _egglib_binding.vectorui___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorui self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, 
            vectorui v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(vectorui self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        """
        return _egglib_binding.vectorui___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorui self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _egglib_binding.vectorui___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorui self, std::vector< unsigned int >::difference_type i)
        __delitem__(vectorui self, PySliceObject * slice)
        """
        return _egglib_binding.vectorui___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorui self, PySliceObject * slice) -> vectorui
        __getitem__(vectorui self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _egglib_binding.vectorui___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorui self, PySliceObject * slice, vectorui v)
        __setitem__(vectorui self, PySliceObject * slice)
        __setitem__(vectorui self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _egglib_binding.vectorui___setitem__(self, *args)

    def append(self, *args):
        """append(vectorui self, std::vector< unsigned int >::value_type const & x)"""
        return _egglib_binding.vectorui_append(self, *args)

    def empty(self):
        """empty(vectorui self) -> bool"""
        return _egglib_binding.vectorui_empty(self)

    def size(self):
        """size(vectorui self) -> std::vector< unsigned int >::size_type"""
        return _egglib_binding.vectorui_size(self)

    def clear(self):
        """clear(vectorui self)"""
        return _egglib_binding.vectorui_clear(self)

    def swap(self, *args):
        """swap(vectorui self, vectorui v)"""
        return _egglib_binding.vectorui_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorui self) -> std::vector< unsigned int >::allocator_type"""
        return _egglib_binding.vectorui_get_allocator(self)

    def begin(self):
        """begin(vectorui self) -> std::vector< unsigned int >::iterator"""
        return _egglib_binding.vectorui_begin(self)

    def end(self):
        """end(vectorui self) -> std::vector< unsigned int >::iterator"""
        return _egglib_binding.vectorui_end(self)

    def rbegin(self):
        """rbegin(vectorui self) -> std::vector< unsigned int >::reverse_iterator"""
        return _egglib_binding.vectorui_rbegin(self)

    def rend(self):
        """rend(vectorui self) -> std::vector< unsigned int >::reverse_iterator"""
        return _egglib_binding.vectorui_rend(self)

    def pop_back(self):
        """pop_back(vectorui self)"""
        return _egglib_binding.vectorui_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorui self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(vectorui self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _egglib_binding.vectorui_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(unsigned int)> self) -> vectorui
        __init__(std::vector<(unsigned int)> self, vectorui arg2) -> vectorui
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size) -> vectorui
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> vectorui
        """
        this = _egglib_binding.new_vectorui(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorui self, std::vector< unsigned int >::value_type const & x)"""
        return _egglib_binding.vectorui_push_back(self, *args)

    def front(self):
        """front(vectorui self) -> std::vector< unsigned int >::value_type const &"""
        return _egglib_binding.vectorui_front(self)

    def back(self):
        """back(vectorui self) -> std::vector< unsigned int >::value_type const &"""
        return _egglib_binding.vectorui_back(self)

    def assign(self, *args):
        """assign(vectorui self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _egglib_binding.vectorui_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorui self, std::vector< unsigned int >::size_type new_size)
        resize(vectorui self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _egglib_binding.vectorui_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorui self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(vectorui self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, 
            std::vector< unsigned int >::value_type const & x)
        """
        return _egglib_binding.vectorui_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorui self, std::vector< unsigned int >::size_type n)"""
        return _egglib_binding.vectorui_reserve(self, *args)

    def capacity(self):
        """capacity(vectorui self) -> std::vector< unsigned int >::size_type"""
        return _egglib_binding.vectorui_capacity(self)

    __swig_destroy__ = _egglib_binding.delete_vectorui
    __del__ = lambda self : None;
vectorui_swigregister = _egglib_binding.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectord(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectord self) -> SwigPyIterator"""
        return _egglib_binding.vectord_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectord self) -> bool"""
        return _egglib_binding.vectord___nonzero__(self)

    def __bool__(self):
        """__bool__(vectord self) -> bool"""
        return _egglib_binding.vectord___bool__(self)

    def __len__(self):
        """__len__(vectord self) -> std::vector< double >::size_type"""
        return _egglib_binding.vectord___len__(self)

    def pop(self):
        """pop(vectord self) -> std::vector< double >::value_type"""
        return _egglib_binding.vectord_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectord self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vectord"""
        return _egglib_binding.vectord___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectord self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            vectord v=std::vector< double,std::allocator< double > >())
        __setslice__(vectord self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _egglib_binding.vectord___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectord self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _egglib_binding.vectord___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectord self, std::vector< double >::difference_type i)
        __delitem__(vectord self, PySliceObject * slice)
        """
        return _egglib_binding.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectord self, PySliceObject * slice) -> vectord
        __getitem__(vectord self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _egglib_binding.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectord self, PySliceObject * slice, vectord v)
        __setitem__(vectord self, PySliceObject * slice)
        __setitem__(vectord self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _egglib_binding.vectord___setitem__(self, *args)

    def append(self, *args):
        """append(vectord self, std::vector< double >::value_type const & x)"""
        return _egglib_binding.vectord_append(self, *args)

    def empty(self):
        """empty(vectord self) -> bool"""
        return _egglib_binding.vectord_empty(self)

    def size(self):
        """size(vectord self) -> std::vector< double >::size_type"""
        return _egglib_binding.vectord_size(self)

    def clear(self):
        """clear(vectord self)"""
        return _egglib_binding.vectord_clear(self)

    def swap(self, *args):
        """swap(vectord self, vectord v)"""
        return _egglib_binding.vectord_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectord self) -> std::vector< double >::allocator_type"""
        return _egglib_binding.vectord_get_allocator(self)

    def begin(self):
        """begin(vectord self) -> std::vector< double >::iterator"""
        return _egglib_binding.vectord_begin(self)

    def end(self):
        """end(vectord self) -> std::vector< double >::iterator"""
        return _egglib_binding.vectord_end(self)

    def rbegin(self):
        """rbegin(vectord self) -> std::vector< double >::reverse_iterator"""
        return _egglib_binding.vectord_rbegin(self)

    def rend(self):
        """rend(vectord self) -> std::vector< double >::reverse_iterator"""
        return _egglib_binding.vectord_rend(self)

    def pop_back(self):
        """pop_back(vectord self)"""
        return _egglib_binding.vectord_pop_back(self)

    def erase(self, *args):
        """
        erase(vectord self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vectord self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _egglib_binding.vectord_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> vectord
        __init__(std::vector<(double)> self, vectord arg2) -> vectord
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vectord
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectord
        """
        this = _egglib_binding.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectord self, std::vector< double >::value_type const & x)"""
        return _egglib_binding.vectord_push_back(self, *args)

    def front(self):
        """front(vectord self) -> std::vector< double >::value_type const &"""
        return _egglib_binding.vectord_front(self)

    def back(self):
        """back(vectord self) -> std::vector< double >::value_type const &"""
        return _egglib_binding.vectord_back(self)

    def assign(self, *args):
        """assign(vectord self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _egglib_binding.vectord_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectord self, std::vector< double >::size_type new_size)
        resize(vectord self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _egglib_binding.vectord_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectord self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vectord self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _egglib_binding.vectord_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectord self, std::vector< double >::size_type n)"""
        return _egglib_binding.vectord_reserve(self, *args)

    def capacity(self):
        """capacity(vectord self) -> std::vector< double >::size_type"""
        return _egglib_binding.vectord_capacity(self)

    __swig_destroy__ = _egglib_binding.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _egglib_binding.vectord_swigregister
vectord_swigregister(vectord)

class vectorvi(_object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorvi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorvi, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorvi self) -> SwigPyIterator"""
        return _egglib_binding.vectorvi_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorvi self) -> bool"""
        return _egglib_binding.vectorvi___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorvi self) -> bool"""
        return _egglib_binding.vectorvi___bool__(self)

    def __len__(self):
        """__len__(vectorvi self) -> std::vector< std::vector< int > >::size_type"""
        return _egglib_binding.vectorvi___len__(self)

    def pop(self):
        """pop(vectorvi self) -> vectori"""
        return _egglib_binding.vectorvi_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorvi self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vectorvi"""
        return _egglib_binding.vectorvi___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorvi self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, 
            vectorvi v=std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >())
        __setslice__(vectorvi self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        """
        return _egglib_binding.vectorvi___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorvi self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _egglib_binding.vectorvi___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorvi self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(vectorvi self, PySliceObject * slice)
        """
        return _egglib_binding.vectorvi___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorvi self, PySliceObject * slice) -> vectorvi
        __getitem__(vectorvi self, std::vector< std::vector< int > >::difference_type i) -> vectori
        """
        return _egglib_binding.vectorvi___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorvi self, PySliceObject * slice, vectorvi v)
        __setitem__(vectorvi self, PySliceObject * slice)
        __setitem__(vectorvi self, std::vector< std::vector< int > >::difference_type i, vectori x)
        """
        return _egglib_binding.vectorvi___setitem__(self, *args)

    def append(self, *args):
        """append(vectorvi self, vectori x)"""
        return _egglib_binding.vectorvi_append(self, *args)

    def empty(self):
        """empty(vectorvi self) -> bool"""
        return _egglib_binding.vectorvi_empty(self)

    def size(self):
        """size(vectorvi self) -> std::vector< std::vector< int > >::size_type"""
        return _egglib_binding.vectorvi_size(self)

    def clear(self):
        """clear(vectorvi self)"""
        return _egglib_binding.vectorvi_clear(self)

    def swap(self, *args):
        """swap(vectorvi self, vectorvi v)"""
        return _egglib_binding.vectorvi_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorvi self) -> std::vector< std::vector< int > >::allocator_type"""
        return _egglib_binding.vectorvi_get_allocator(self)

    def begin(self):
        """begin(vectorvi self) -> std::vector< std::vector< int > >::iterator"""
        return _egglib_binding.vectorvi_begin(self)

    def end(self):
        """end(vectorvi self) -> std::vector< std::vector< int > >::iterator"""
        return _egglib_binding.vectorvi_end(self)

    def rbegin(self):
        """rbegin(vectorvi self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _egglib_binding.vectorvi_rbegin(self)

    def rend(self):
        """rend(vectorvi self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _egglib_binding.vectorvi_rend(self)

    def pop_back(self):
        """pop_back(vectorvi self)"""
        return _egglib_binding.vectorvi_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorvi self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(vectorvi self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _egglib_binding.vectorvi_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::vector<(int)>)> self) -> vectorvi
        __init__(std::vector<(std::vector<(int)>)> self, vectorvi arg2) -> vectorvi
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size) -> vectorvi
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size, vectori value) -> vectorvi
        """
        this = _egglib_binding.new_vectorvi(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorvi self, vectori x)"""
        return _egglib_binding.vectorvi_push_back(self, *args)

    def front(self):
        """front(vectorvi self) -> vectori"""
        return _egglib_binding.vectorvi_front(self)

    def back(self):
        """back(vectorvi self) -> vectori"""
        return _egglib_binding.vectorvi_back(self)

    def assign(self, *args):
        """assign(vectorvi self, std::vector< std::vector< int > >::size_type n, vectori x)"""
        return _egglib_binding.vectorvi_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorvi self, std::vector< std::vector< int > >::size_type new_size)
        resize(vectorvi self, std::vector< std::vector< int > >::size_type new_size, vectori x)
        """
        return _egglib_binding.vectorvi_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorvi self, std::vector< std::vector< int > >::iterator pos, vectori x) -> std::vector< std::vector< int > >::iterator
        insert(vectorvi self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, 
            vectori x)
        """
        return _egglib_binding.vectorvi_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorvi self, std::vector< std::vector< int > >::size_type n)"""
        return _egglib_binding.vectorvi_reserve(self, *args)

    def capacity(self):
        """capacity(vectorvi self) -> std::vector< std::vector< int > >::size_type"""
        return _egglib_binding.vectorvi_capacity(self)

    __swig_destroy__ = _egglib_binding.delete_vectorvi
    __del__ = lambda self : None;
vectorvi_swigregister = _egglib_binding.vectorvi_swigregister
vectorvi_swigregister(vectorvi)

class Random(_object):
    """Proxy of C++ egglib::Random class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::Random self) -> Random
        __init__(egglib::Random self, double seed1, double seed2) -> Random
        """
        this = _egglib_binding.new_Random(*args)
        try: self.this.append(this)
        except: self.this = this
    def erand(self, *args):
        """erand(Random self, double expectation) -> double"""
        return _egglib_binding.Random_erand(self, *args)

    def irand(self, *args):
        """irand(Random self, unsigned int max) -> unsigned int"""
        return _egglib_binding.Random_irand(self, *args)

    def prand(self, *args):
        """prand(Random self, double p) -> unsigned int"""
        return _egglib_binding.Random_prand(self, *args)

    def nrand(self):
        """nrand(Random self) -> double"""
        return _egglib_binding.Random_nrand(self)

    def grand(self, *args):
        """grand(Random self, double arg2) -> unsigned int"""
        return _egglib_binding.Random_grand(self, *args)

    def uniform(self):
        """uniform(Random self) -> double"""
        return _egglib_binding.Random_uniform(self)

    def seed1(self, *args):
        """
        seed1(Random self) -> double
        seed1(Random self, double arg2)
        """
        return _egglib_binding.Random_seed1(self, *args)

    def seed2(self, *args):
        """
        seed2(Random self) -> double
        seed2(Random self, double arg2)
        """
        return _egglib_binding.Random_seed2(self, *args)

    __swig_destroy__ = _egglib_binding.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _egglib_binding.Random_swigregister
Random_swigregister(Random)

class Container(_object):
    """Proxy of C++ egglib::Container class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::Container self) -> Container
        __init__(egglib::Container self, Container source) -> Container
        """
        this = _egglib_binding.new_Container(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_Container
    __del__ = lambda self : None;
    def clear(self):
        """clear(Container self)"""
        return _egglib_binding.Container_clear(self)

    def append(self, *args):
        """
        append(Container self, char const * name, char const * sequence, unsigned int group=0) -> unsigned int
        append(Container self, char const * name, char const * sequence) -> unsigned int
        """
        return _egglib_binding.Container_append(self, *args)

    def remove(self, *args):
        """remove(Container self, unsigned int pos) -> unsigned int"""
        return _egglib_binding.Container_remove(self, *args)

    def appendSequence(self, *args):
        """appendSequence(Container self, unsigned int pos, char const * sequence)"""
        return _egglib_binding.Container_appendSequence(self, *args)

    def set(self, *args):
        """set(Container self, unsigned int sequence, unsigned int position, char ch)"""
        return _egglib_binding.Container_set(self, *args)

    def get(self, *args):
        """get(Container self, unsigned int s, unsigned int p) -> char"""
        return _egglib_binding.Container_get(self, *args)

    def hslice(self, *args):
        """hslice(Container self, unsigned int a, unsigned int b) -> Container"""
        return _egglib_binding.Container_hslice(self, *args)

    def ns(self):
        """ns(Container self) -> unsigned int"""
        return _egglib_binding.Container_ns(self)

    def ls(self, *args):
        """ls(Container self, unsigned int pos) -> unsigned int"""
        return _egglib_binding.Container_ls(self, *args)

    def name(self, *args):
        """
        name(Container self, unsigned int pos, char const * name)
        name(Container self, unsigned int pos) -> char const *
        """
        return _egglib_binding.Container_name(self, *args)

    def sequence(self, *args):
        """
        sequence(Container self, unsigned int pos, char const * sequence)
        sequence(Container self, unsigned int pos) -> char const *
        """
        return _egglib_binding.Container_sequence(self, *args)

    def group(self, *args):
        """
        group(Container self, unsigned int pos, unsigned int group)
        group(Container self, unsigned int pos) -> unsigned int
        """
        return _egglib_binding.Container_group(self, *args)

    def equalize(self, ch='?'):
        """
        equalize(Container self, char ch='?') -> unsigned int
        equalize(Container self) -> unsigned int
        """
        return _egglib_binding.Container_equalize(self, ch)

    def isEqual(self):
        """isEqual(Container self) -> bool"""
        return _egglib_binding.Container_isEqual(self)

    def find(self, *args):
        """
        find(Container self, char const * string, bool strict=True) -> int
        find(Container self, char const * string) -> int
        """
        return _egglib_binding.Container_find(self, *args)

Container_swigregister = _egglib_binding.Container_swigregister
Container_swigregister(Container)

class CharMatrix(_object):
    """Proxy of C++ egglib::CharMatrix class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharMatrix, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def numberOfSequences(self):
        """numberOfSequences(CharMatrix self) -> unsigned int"""
        return _egglib_binding.CharMatrix_numberOfSequences(self)

    def numberOfSites(self):
        """numberOfSites(CharMatrix self) -> unsigned int"""
        return _egglib_binding.CharMatrix_numberOfSites(self)

    def character(self, *args):
        """character(CharMatrix self, unsigned int sequence, unsigned int site) -> char"""
        return _egglib_binding.CharMatrix_character(self, *args)

    def populationLabel(self, *args):
        """populationLabel(CharMatrix self, unsigned int row) -> unsigned int"""
        return _egglib_binding.CharMatrix_populationLabel(self, *args)

    def sitePosition(self, *args):
        """sitePosition(CharMatrix self, unsigned int column) -> double"""
        return _egglib_binding.CharMatrix_sitePosition(self, *args)

    __swig_destroy__ = _egglib_binding.delete_CharMatrix
    __del__ = lambda self : None;
CharMatrix_swigregister = _egglib_binding.CharMatrix_swigregister
CharMatrix_swigregister(CharMatrix)

class DataMatrix(CharMatrix):
    """Proxy of C++ egglib::DataMatrix class"""
    __swig_setmethods__ = {}
    for _s in [CharMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [CharMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::DataMatrix self) -> DataMatrix
        __init__(egglib::DataMatrix self, unsigned int numberOfSequences, unsigned int numberOfSites) -> DataMatrix
        __init__(egglib::DataMatrix self, DataMatrix arg2) -> DataMatrix
        """
        this = _egglib_binding.new_DataMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_DataMatrix
    __del__ = lambda self : None;
    def numberOfSites(self):
        """numberOfSites(DataMatrix self) -> unsigned int"""
        return _egglib_binding.DataMatrix_numberOfSites(self)

    def numberOfSequences(self):
        """numberOfSequences(DataMatrix self) -> unsigned int"""
        return _egglib_binding.DataMatrix_numberOfSequences(self)

    def set(self, *args):
        """set(DataMatrix self, unsigned int sequence, unsigned int site, int value)"""
        return _egglib_binding.DataMatrix_set(self, *args)

    def get(self, *args):
        """get(DataMatrix self, unsigned int sequence, unsigned int site) -> int"""
        return _egglib_binding.DataMatrix_get(self, *args)

    def sitePosition(self, *args):
        """
        sitePosition(DataMatrix self, unsigned int site, double value)
        sitePosition(DataMatrix self, unsigned int site) -> double
        """
        return _egglib_binding.DataMatrix_sitePosition(self, *args)

    def populationLabel(self, *args):
        """
        populationLabel(DataMatrix self, unsigned int sequence, unsigned int value)
        populationLabel(DataMatrix self, unsigned int sequence) -> unsigned int
        """
        return _egglib_binding.DataMatrix_populationLabel(self, *args)

    def clear(self):
        """clear(DataMatrix self)"""
        return _egglib_binding.DataMatrix_clear(self)

    def resize(self, *args):
        """resize(DataMatrix self, unsigned int newNumberOfSequences, unsigned int newNumberOfSites)"""
        return _egglib_binding.DataMatrix_resize(self, *args)

    def shift(self, *args):
        """shift(DataMatrix self, int minimum)"""
        return _egglib_binding.DataMatrix_shift(self, *args)

    def character(self, *args):
        """character(DataMatrix self, unsigned int sequence, unsigned int site) -> char"""
        return _egglib_binding.DataMatrix_character(self, *args)

DataMatrix_swigregister = _egglib_binding.DataMatrix_swigregister
DataMatrix_swigregister(DataMatrix)

class Align(Container,CharMatrix):
    """Proxy of C++ egglib::Align class"""
    __swig_setmethods__ = {}
    for _s in [Container,CharMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Align, name, value)
    __swig_getmethods__ = {}
    for _s in [Container,CharMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Align, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::Align self) -> Align
        __init__(egglib::Align self, unsigned int number_of_sequences, unsigned int alignment_length) -> Align
        __init__(egglib::Align self, Container container) -> Align
        """
        this = _egglib_binding.new_Align(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_Align
    __del__ = lambda self : None;
    def append(self, *args):
        """
        append(Align self, char const * name, char const * sequence, unsigned int group=0) -> unsigned int
        append(Align self, char const * name, char const * sequence) -> unsigned int
        """
        return _egglib_binding.Align_append(self, *args)

    def removePosition(self, *args):
        """removePosition(Align self, unsigned int pos) -> unsigned int"""
        return _egglib_binding.Align_removePosition(self, *args)

    def remove(self, *args):
        """remove(Align self, unsigned int pos) -> unsigned int"""
        return _egglib_binding.Align_remove(self, *args)

    def sequence(self, *args):
        """
        sequence(Align self, unsigned int pos) -> char const
        sequence(Align self, unsigned int pos, char const * sequence)
        """
        return _egglib_binding.Align_sequence(self, *args)

    def ls(self, *args):
        """
        ls(Align self) -> unsigned int
        ls(Align self, unsigned int pos) -> unsigned int
        """
        return _egglib_binding.Align_ls(self, *args)

    def character(self, *args):
        """character(Align self, unsigned int s, unsigned int p) -> char"""
        return _egglib_binding.Align_character(self, *args)

    def get(self, *args):
        """get(Align self, unsigned int sequence, unsigned int position) -> char"""
        return _egglib_binding.Align_get(self, *args)

    def set(self, *args):
        """set(Align self, unsigned int sequence, unsigned int position, char ch)"""
        return _egglib_binding.Align_set(self, *args)

    def binSwitch(self, *args):
        """binSwitch(Align self, unsigned int pos)"""
        return _egglib_binding.Align_binSwitch(self, *args)

    def vslice(self, *args):
        """
        vslice(Align self, vectorui list_of_sites) -> Align
        vslice(Align self, unsigned int a, unsigned int b) -> Align
        """
        return _egglib_binding.Align_vslice(self, *args)

    def clear(self):
        """clear(Align self)"""
        return _egglib_binding.Align_clear(self)

    def numberOfSequences(self):
        """numberOfSequences(Align self) -> unsigned int"""
        return _egglib_binding.Align_numberOfSequences(self)

    def numberOfSites(self):
        """numberOfSites(Align self) -> unsigned int"""
        return _egglib_binding.Align_numberOfSites(self)

    def populationLabel(self, *args):
        """populationLabel(Align self, unsigned int sequenceIndex) -> unsigned int"""
        return _egglib_binding.Align_populationLabel(self, *args)

    def sitePosition(self, *args):
        """sitePosition(Align self, unsigned int position) -> double"""
        return _egglib_binding.Align_sitePosition(self, *args)

Align_swigregister = _egglib_binding.Align_swigregister
Align_swigregister(Align)

class Convert(_object):
    """Proxy of C++ egglib::Convert class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convert, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def align(*args):
        """
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
            bool enforceLength=False, std::string mapping="ACGT", char unknown='?', 
            char nonVaryingState='A') -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
            bool enforceLength=False, std::string mapping="ACGT", char unknown='?') -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
            bool enforceLength=False, std::string mapping="ACGT") -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
            bool enforceLength=False) -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False, bool randomizeAlleles=False) -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
            bool randomizeNonVaryingStates=False) -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False) -> Align
        align(DataMatrix dataMatrix, unsigned int length=0, Random random=None) -> Align
        align(DataMatrix dataMatrix, unsigned int length=0) -> Align
        align(DataMatrix dataMatrix) -> Align
        """
        return _egglib_binding.Convert_align(*args)

    if _newclass:align = staticmethod(align)
    __swig_getmethods__["align"] = lambda x: align
Convert_swigregister = _egglib_binding.Convert_swigregister
Convert_swigregister(Convert)

def Convert_align(*args):
  """
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
        bool enforceLength=False, std::string mapping="ACGT", char unknown='?', 
        char nonVaryingState='A') -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
        bool enforceLength=False, std::string mapping="ACGT", char unknown='?') -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
        bool enforceLength=False, std::string mapping="ACGT") -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False, bool randomizeAlleles=False, 
        bool enforceLength=False) -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False, bool randomizeAlleles=False) -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False, 
        bool randomizeNonVaryingStates=False) -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None, bool randomizePositions=False) -> Align
    align(DataMatrix dataMatrix, unsigned int length=0, Random random=None) -> Align
    align(DataMatrix dataMatrix, unsigned int length=0) -> Align
    Convert_align(DataMatrix dataMatrix) -> Align
    """
  return _egglib_binding.Convert_align(*args)

class Fasta(_object):
    """Proxy of C++ egglib::Fasta class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fasta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fasta, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def parsef(*args):
        """
        parsef(char const * fname, bool importGroupLabels=False) -> Container
        parsef(char const * fname) -> Container
        parsef(char const * fname, Container container, bool importGroupLabels=False)
        parsef(char const * fname, Container container)
        """
        return _egglib_binding.Fasta_parsef(*args)

    if _newclass:parsef = staticmethod(parsef)
    __swig_getmethods__["parsef"] = lambda x: parsef
    def parse(*args):
        """
        parse(std::string const & str, bool importGroupLabels=False) -> Container
        parse(std::string const & str) -> Container
        parse(std::string const & str, Container container, bool importGroupLabels=False)
        parse(std::string const & str, Container container)
        """
        return _egglib_binding.Fasta_parse(*args)

    if _newclass:parse = staticmethod(parse)
    __swig_getmethods__["parse"] = lambda x: parse
    def formatf(*args):
        """
        formatf(char const * fname, Container container, bool exportGroupLabels=False, unsigned int lineLength=50)
        formatf(char const * fname, Container container, bool exportGroupLabels=False)
        formatf(char const * fname, Container container)
        """
        return _egglib_binding.Fasta_formatf(*args)

    if _newclass:formatf = staticmethod(formatf)
    __swig_getmethods__["formatf"] = lambda x: formatf
    def format(*args):
        """
        format(Container container, bool exportGroupLabels=False, unsigned int lineLength=50) -> std::string
        format(Container container, bool exportGroupLabels=False) -> std::string
        format(Container container) -> std::string
        """
        return _egglib_binding.Fasta_format(*args)

    if _newclass:format = staticmethod(format)
    __swig_getmethods__["format"] = lambda x: format
Fasta_swigregister = _egglib_binding.Fasta_swigregister
Fasta_swigregister(Fasta)

def Fasta_parsef(*args):
  """
    parsef(char const * fname, bool importGroupLabels=False) -> Container
    parsef(char const * fname) -> Container
    parsef(char const * fname, Container container, bool importGroupLabels=False)
    Fasta_parsef(char const * fname, Container container)
    """
  return _egglib_binding.Fasta_parsef(*args)

def Fasta_parse(*args):
  """
    parse(std::string const & str, bool importGroupLabels=False) -> Container
    parse(std::string const & str) -> Container
    parse(std::string const & str, Container container, bool importGroupLabels=False)
    Fasta_parse(std::string const & str, Container container)
    """
  return _egglib_binding.Fasta_parse(*args)

def Fasta_formatf(*args):
  """
    formatf(char const * fname, Container container, bool exportGroupLabels=False, unsigned int lineLength=50)
    formatf(char const * fname, Container container, bool exportGroupLabels=False)
    Fasta_formatf(char const * fname, Container container)
    """
  return _egglib_binding.Fasta_formatf(*args)

def Fasta_format(*args):
  """
    format(Container container, bool exportGroupLabels=False, unsigned int lineLength=50) -> std::string
    format(Container container, bool exportGroupLabels=False) -> std::string
    Fasta_format(Container container) -> std::string
    """
  return _egglib_binding.Fasta_format(*args)

class Ms(_object):
    """Proxy of C++ egglib::Ms class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ms, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def get(*args):
        """
        get(std::string const arg1, unsigned int ns, bool separated=False) -> DataMatrix
        get(std::string const arg1, unsigned int ns) -> DataMatrix
        """
        return _egglib_binding.Ms_get(*args)

    if _newclass:get = staticmethod(get)
    __swig_getmethods__["get"] = lambda x: get
    def format(*args):
        """
        format(DataMatrix dataMatrix, bool separated=False) -> std::string
        format(DataMatrix dataMatrix) -> std::string
        """
        return _egglib_binding.Ms_format(*args)

    if _newclass:format = staticmethod(format)
    __swig_getmethods__["format"] = lambda x: format
    def tMRCA():
        """tMRCA() -> double"""
        return _egglib_binding.Ms_tMRCA()

    if _newclass:tMRCA = staticmethod(tMRCA)
    __swig_getmethods__["tMRCA"] = lambda x: tMRCA
    def prob():
        """prob() -> double"""
        return _egglib_binding.Ms_prob()

    if _newclass:prob = staticmethod(prob)
    __swig_getmethods__["prob"] = lambda x: prob
    def trees():
        """trees() -> std::string"""
        return _egglib_binding.Ms_trees()

    if _newclass:trees = staticmethod(trees)
    __swig_getmethods__["trees"] = lambda x: trees
Ms_swigregister = _egglib_binding.Ms_swigregister
Ms_swigregister(Ms)

def Ms_get(*args):
  """
    get(std::string const arg1, unsigned int ns, bool separated=False) -> DataMatrix
    Ms_get(std::string const arg1, unsigned int ns) -> DataMatrix
    """
  return _egglib_binding.Ms_get(*args)

def Ms_format(*args):
  """
    format(DataMatrix dataMatrix, bool separated=False) -> std::string
    Ms_format(DataMatrix dataMatrix) -> std::string
    """
  return _egglib_binding.Ms_format(*args)

def Ms_tMRCA():
  """Ms_tMRCA() -> double"""
  return _egglib_binding.Ms_tMRCA()

def Ms_prob():
  """Ms_prob() -> double"""
  return _egglib_binding.Ms_prob()

def Ms_trees():
  """Ms_trees() -> std::string"""
  return _egglib_binding.Ms_trees()

class Staden(_object):
    """Proxy of C++ egglib::Staden class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Staden, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Staden, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def parse(*args):
        """
        parse(std::string const & string, bool deleteConsensus=True) -> Align
        parse(std::string const & string) -> Align
        """
        return _egglib_binding.Staden_parse(*args)

    if _newclass:parse = staticmethod(parse)
    __swig_getmethods__["parse"] = lambda x: parse
Staden_swigregister = _egglib_binding.Staden_swigregister
Staden_swigregister(Staden)

def Staden_parse(*args):
  """
    parse(std::string const & string, bool deleteConsensus=True) -> Align
    Staden_parse(std::string const & string) -> Align
    """
  return _egglib_binding.Staden_parse(*args)

class Edge(_object):
    """Proxy of C++ egglib::Edge class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::Edge self, unsigned int numberOfSegments) -> Edge"""
        this = _egglib_binding.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(Edge self)"""
        return _egglib_binding.Edge_reset(self)

    def coalescence(self, *args):
        """
        coalescence(Edge self, double date, Edge son1, Edge son2, unsigned int * edgesPerSegments, egglib::Edge ** MRCA, 
            double & totalLength, double * segmentLengths)
        """
        return _egglib_binding.Edge_coalescence(self, *args)

    def recombination(self, *args):
        """recombination(Edge self, double date, Edge dest1, Edge dest2, Random random, double & totalLength, double * segmentLengths)"""
        return _egglib_binding.Edge_recombination(self, *args)

    def set_terminal(self, *args):
        """set_terminal(Edge self, unsigned int leaf_index)"""
        return _egglib_binding.Edge_set_terminal(self, *args)

    __swig_setmethods__["length"] = _egglib_binding.Edge_length_set
    __swig_getmethods__["length"] = _egglib_binding.Edge_length_get
    if _newclass:length = _swig_property(_egglib_binding.Edge_length_get, _egglib_binding.Edge_length_set)
    __swig_setmethods__["coverage"] = _egglib_binding.Edge_coverage_set
    __swig_getmethods__["coverage"] = _egglib_binding.Edge_coverage_get
    if _newclass:coverage = _swig_property(_egglib_binding.Edge_coverage_get, _egglib_binding.Edge_coverage_set)
    __swig_setmethods__["bottom"] = _egglib_binding.Edge_bottom_set
    __swig_getmethods__["bottom"] = _egglib_binding.Edge_bottom_get
    if _newclass:bottom = _swig_property(_egglib_binding.Edge_bottom_get, _egglib_binding.Edge_bottom_set)
    __swig_setmethods__["top"] = _egglib_binding.Edge_top_set
    __swig_getmethods__["top"] = _egglib_binding.Edge_top_get
    if _newclass:top = _swig_property(_egglib_binding.Edge_top_get, _egglib_binding.Edge_top_set)
    __swig_setmethods__["son1"] = _egglib_binding.Edge_son1_set
    __swig_getmethods__["son1"] = _egglib_binding.Edge_son1_get
    if _newclass:son1 = _swig_property(_egglib_binding.Edge_son1_get, _egglib_binding.Edge_son1_set)
    __swig_setmethods__["son2"] = _egglib_binding.Edge_son2_set
    __swig_getmethods__["son2"] = _egglib_binding.Edge_son2_get
    if _newclass:son2 = _swig_property(_egglib_binding.Edge_son2_get, _egglib_binding.Edge_son2_set)
    __swig_setmethods__["numberOfSons"] = _egglib_binding.Edge_numberOfSons_set
    __swig_getmethods__["numberOfSons"] = _egglib_binding.Edge_numberOfSons_get
    if _newclass:numberOfSons = _swig_property(_egglib_binding.Edge_numberOfSons_get, _egglib_binding.Edge_numberOfSons_set)
    def segment(self, *args):
        """segment(Edge self, unsigned int segmentIndex) -> bool"""
        return _egglib_binding.Edge_segment(self, *args)

    def label(self):
        """label(Edge self) -> unsigned int"""
        return _egglib_binding.Edge_label(self)

    __swig_destroy__ = _egglib_binding.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _egglib_binding.Edge_swigregister
Edge_swigregister(Edge)

class Arg(_object):
    """Proxy of C++ egglib::Arg class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arg, name)
    __repr__ = _swig_repr
    def set(self, *args):
        """set(Arg self, Current current, unsigned int numberOfSegments)"""
        return _egglib_binding.Arg_set(self, *args)

    def reset(self, *args):
        """reset(Arg self, Current current)"""
        return _egglib_binding.Arg_reset(self, *args)

    def __init__(self, *args): 
        """__init__(egglib::Arg self, Current current, unsigned int numberOfSegments) -> Arg"""
        this = _egglib_binding.new_Arg(*args)
        try: self.this.append(this)
        except: self.this = this
    def time(self):
        """time(Arg self) -> double"""
        return _egglib_binding.Arg_time(self)

    def addTime(self, *args):
        """addTime(Arg self, double increment)"""
        return _egglib_binding.Arg_addTime(self, *args)

    def coalescence(self, *args):
        """
        coalescence(Arg self, double incr, unsigned int pop, unsigned int index1, unsigned int index2)
        coalescence(Arg self, double incr, unsigned int pop, Random random)
        """
        return _egglib_binding.Arg_coalescence(self, *args)

    def recombination(self, *args):
        """recombination(Arg self, double incr, Random random)"""
        return _egglib_binding.Arg_recombination(self, *args)

    def mute(self, *args):
        """mute(Arg self, unsigned int segment, double treePosition) -> Edge"""
        return _egglib_binding.Arg_mute(self, *args)

    def ageUltimateMRCA(self):
        """ageUltimateMRCA(Arg self) -> double"""
        return _egglib_binding.Arg_ageUltimateMRCA(self)

    def ageMRCA(self, *args):
        """ageMRCA(Arg self, unsigned int segmentIndex) -> double"""
        return _egglib_binding.Arg_ageMRCA(self, *args)

    def MRCA(self, *args):
        """MRCA(Arg self, unsigned int segmentIndex) -> Edge"""
        return _egglib_binding.Arg_MRCA(self, *args)

    __swig_setmethods__["numberOfSegments"] = _egglib_binding.Arg_numberOfSegments_set
    __swig_getmethods__["numberOfSegments"] = _egglib_binding.Arg_numberOfSegments_get
    if _newclass:numberOfSegments = _swig_property(_egglib_binding.Arg_numberOfSegments_get, _egglib_binding.Arg_numberOfSegments_set)
    def newick(self, *args):
        """newick(Arg self, unsigned int segment) -> std::string"""
        return _egglib_binding.Arg_newick(self, *args)

    __swig_setmethods__["numberOfSamples"] = _egglib_binding.Arg_numberOfSamples_set
    __swig_getmethods__["numberOfSamples"] = _egglib_binding.Arg_numberOfSamples_get
    if _newclass:numberOfSamples = _swig_property(_egglib_binding.Arg_numberOfSamples_get, _egglib_binding.Arg_numberOfSamples_set)
    __swig_setmethods__["totalLength"] = _egglib_binding.Arg_totalLength_set
    __swig_getmethods__["totalLength"] = _egglib_binding.Arg_totalLength_get
    if _newclass:totalLength = _swig_property(_egglib_binding.Arg_totalLength_get, _egglib_binding.Arg_totalLength_set)
    __swig_setmethods__["segmentLengths"] = _egglib_binding.Arg_segmentLengths_set
    __swig_getmethods__["segmentLengths"] = _egglib_binding.Arg_segmentLengths_get
    if _newclass:segmentLengths = _swig_property(_egglib_binding.Arg_segmentLengths_get, _egglib_binding.Arg_segmentLengths_set)
    __swig_setmethods__["numberOfEdges"] = _egglib_binding.Arg_numberOfEdges_set
    __swig_getmethods__["numberOfEdges"] = _egglib_binding.Arg_numberOfEdges_get
    if _newclass:numberOfEdges = _swig_property(_egglib_binding.Arg_numberOfEdges_get, _egglib_binding.Arg_numberOfEdges_set)
    __swig_setmethods__["numberOfRecombinationEvents"] = _egglib_binding.Arg_numberOfRecombinationEvents_set
    __swig_getmethods__["numberOfRecombinationEvents"] = _egglib_binding.Arg_numberOfRecombinationEvents_get
    if _newclass:numberOfRecombinationEvents = _swig_property(_egglib_binding.Arg_numberOfRecombinationEvents_get, _egglib_binding.Arg_numberOfRecombinationEvents_set)
    __swig_destroy__ = _egglib_binding.delete_Arg
    __del__ = lambda self : None;
Arg_swigregister = _egglib_binding.Arg_swigregister
Arg_swigregister(Arg)

class ParamSet(_object):
    """Proxy of C++ egglib::ParamSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParamSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _egglib_binding.delete_ParamSet
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(egglib::ParamSet self) -> ParamSet
        __init__(egglib::ParamSet self, ParamSet arg2) -> ParamSet
        """
        this = _egglib_binding.new_ParamSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(ParamSet self)"""
        return _egglib_binding.ParamSet_reset(self)

    def numberOfPopulations(self):
        """numberOfPopulations(ParamSet self) -> unsigned int"""
        return _egglib_binding.ParamSet_numberOfPopulations(self)

    def pairwiseMigrationRate(self, *args):
        """
        pairwiseMigrationRate(ParamSet self, unsigned int source, unsigned int dest) -> double
        pairwiseMigrationRate(ParamSet self, unsigned int source, unsigned int dest, double value)
        """
        return _egglib_binding.ParamSet_pairwiseMigrationRate(self, *args)

    def migrationRate(self, *args):
        """migrationRate(ParamSet self, double value)"""
        return _egglib_binding.ParamSet_migrationRate(self, *args)

    def populationSize(self, *args):
        """
        populationSize(ParamSet self, unsigned int populationIndex) -> double
        populationSize(ParamSet self, unsigned int populationIndex, double value)
        """
        return _egglib_binding.ParamSet_populationSize(self, *args)

    def growthRate(self, *args):
        """
        growthRate(ParamSet self, unsigned int populationIndex) -> double
        growthRate(ParamSet self, unsigned int populationIndex, double value)
        """
        return _egglib_binding.ParamSet_growthRate(self, *args)

    def recombinationRate(self, *args):
        """
        recombinationRate(ParamSet self) -> double
        recombinationRate(ParamSet self, double value)
        """
        return _egglib_binding.ParamSet_recombinationRate(self, *args)

    def numberOfSegments(self, *args):
        """
        numberOfSegments(ParamSet self) -> unsigned int
        numberOfSegments(ParamSet self, unsigned int value)
        """
        return _egglib_binding.ParamSet_numberOfSegments(self, *args)

    def selfingRate(self, *args):
        """
        selfingRate(ParamSet self) -> double
        selfingRate(ParamSet self, double value)
        """
        return _egglib_binding.ParamSet_selfingRate(self, *args)

    def addPopulation(self, *args):
        """addPopulation(ParamSet self, double migr)"""
        return _egglib_binding.ParamSet_addPopulation(self, *args)

    def addChange(self, *args):
        """addChange(ParamSet self, Change change)"""
        return _egglib_binding.ParamSet_addChange(self, *args)

    def nextChangeDate(self):
        """nextChangeDate(ParamSet self) -> double"""
        return _egglib_binding.ParamSet_nextChangeDate(self)

    def nextChangeDo(self, *args):
        """nextChangeDo(ParamSet self, Controller controller)"""
        return _egglib_binding.ParamSet_nextChangeDo(self, *args)

    def singles(self, *args):
        """
        singles(ParamSet self, unsigned int populationIndex) -> unsigned int
        singles(ParamSet self, unsigned int populationIndex, unsigned int value)
        """
        return _egglib_binding.ParamSet_singles(self, *args)

    def doubles(self, *args):
        """
        doubles(ParamSet self, unsigned int populationIndex) -> unsigned int
        doubles(ParamSet self, unsigned int populationIndex, unsigned int value)
        """
        return _egglib_binding.ParamSet_doubles(self, *args)

    def numberOfSamples(self):
        """numberOfSamples(ParamSet self) -> unsigned int"""
        return _egglib_binding.ParamSet_numberOfSamples(self)

    def dateOfLastChange(self, *args):
        """dateOfLastChange(ParamSet self, unsigned int populationIndex) -> double"""
        return _egglib_binding.ParamSet_dateOfLastChange(self, *args)

    def setGroups(self, *args):
        """
        setGroups(ParamSet self, DataMatrix dataMatrix, bool labelIndividuals=False)
        setGroups(ParamSet self, DataMatrix dataMatrix)
        """
        return _egglib_binding.ParamSet_setGroups(self, *args)

ParamSet_swigregister = _egglib_binding.ParamSet_swigregister
ParamSet_swigregister(ParamSet)

class Current(_object):
    """Proxy of C++ egglib::Current class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Current, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Current, name)
    __repr__ = _swig_repr
    def reset(self, *args):
        """reset(Current self, ParamSet paramSet)"""
        return _egglib_binding.Current_reset(self, *args)

    __swig_destroy__ = _egglib_binding.delete_Current
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(egglib::Current self) -> Current
        __init__(egglib::Current self, ParamSet paramSet) -> Current
        __init__(egglib::Current self, Current arg2) -> Current
        """
        this = _egglib_binding.new_Current(*args)
        try: self.this.append(this)
        except: self.this = this
    def numberOfPopulations(self):
        """numberOfPopulations(Current self) -> unsigned int"""
        return _egglib_binding.Current_numberOfPopulations(self)

    def addPopulation(self):
        """addPopulation(Current self)"""
        return _egglib_binding.Current_addPopulation(self)

    def populationNumberOfLineages(self, *args):
        """populationNumberOfLineages(Current self, unsigned int populationIndex) -> unsigned int"""
        return _egglib_binding.Current_populationNumberOfLineages(self, *args)

    def population(self, *args):
        """population(Current self, unsigned int populationIndex) -> egglib::Population *"""
        return _egglib_binding.Current_population(self, *args)

    def totalNumberOfLineages(self):
        """totalNumberOfLineages(Current self) -> unsigned int"""
        return _egglib_binding.Current_totalNumberOfLineages(self)

Current_swigregister = _egglib_binding.Current_swigregister
Current_swigregister(Current)

class Controller(_object):
    """Proxy of C++ egglib::Controller class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::Controller self) -> Controller
        __init__(egglib::Controller self, ParamSet paramSet, Random random) -> Controller
        """
        this = _egglib_binding.new_Controller(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self):
        """reset(Controller self)"""
        return _egglib_binding.Controller_reset(self)

    def step(self):
        """step(Controller self) -> unsigned int"""
        return _egglib_binding.Controller_step(self)

    def getArg(self):
        """getArg(Controller self) -> Arg"""
        return _egglib_binding.Controller_getArg(self)

    def bottleneck(self, *args):
        """bottleneck(Controller self, unsigned int populationIndex, double strength)"""
        return _egglib_binding.Controller_bottleneck(self, *args)

    def moveAllLineages(self, *args):
        """moveAllLineages(Controller self, unsigned int source, unsigned int dest)"""
        return _egglib_binding.Controller_moveAllLineages(self, *args)

    def moveSomeLineages(self, *args):
        """moveSomeLineages(Controller self, unsigned int source, unsigned int dest, double probability)"""
        return _egglib_binding.Controller_moveSomeLineages(self, *args)

    __swig_destroy__ = _egglib_binding.delete_Controller
    __del__ = lambda self : None;
Controller_swigregister = _egglib_binding.Controller_swigregister
Controller_swigregister(Controller)

class Change(_object):
    """Proxy of C++ egglib::Change class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Change, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Change, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def date(self, *args):
        """
        date(Change self) -> double
        date(Change self, double value)
        """
        return _egglib_binding.Change_date(self, *args)

    def apply(self, *args):
        """apply(Change self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.Change_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_Change
    __del__ = lambda self : None;
Change_swigregister = _egglib_binding.Change_swigregister
Change_swigregister(Change)

class SingleParamChange(Change):
    """Proxy of C++ egglib::SingleParamChange class"""
    __swig_setmethods__ = {}
    for _s in [Change]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleParamChange, name, value)
    __swig_getmethods__ = {}
    for _s in [Change]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleParamChange, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def value(self, *args):
        """
        value(SingleParamChange self) -> double
        value(SingleParamChange self, double value)
        """
        return _egglib_binding.SingleParamChange_value(self, *args)

    __swig_destroy__ = _egglib_binding.delete_SingleParamChange
    __del__ = lambda self : None;
SingleParamChange_swigregister = _egglib_binding.SingleParamChange_swigregister
SingleParamChange_swigregister(SingleParamChange)

class PopulationParamChange(SingleParamChange):
    """Proxy of C++ egglib::PopulationParamChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PopulationParamChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PopulationParamChange, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def population(self, *args):
        """
        population(PopulationParamChange self) -> unsigned int
        population(PopulationParamChange self, unsigned int value)
        """
        return _egglib_binding.PopulationParamChange_population(self, *args)

    __swig_destroy__ = _egglib_binding.delete_PopulationParamChange
    __del__ = lambda self : None;
PopulationParamChange_swigregister = _egglib_binding.PopulationParamChange_swigregister
PopulationParamChange_swigregister(PopulationParamChange)

class Bottleneck(SingleParamChange):
    """Proxy of C++ egglib::Bottleneck class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bottleneck, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bottleneck, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::Bottleneck self, double date, double param) -> Bottleneck"""
        this = _egglib_binding.new_Bottleneck(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(Bottleneck self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.Bottleneck_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_Bottleneck
    __del__ = lambda self : None;
Bottleneck_swigregister = _egglib_binding.Bottleneck_swigregister
Bottleneck_swigregister(Bottleneck)

class PopulationBottleneck(PopulationParamChange):
    """Proxy of C++ egglib::PopulationBottleneck class"""
    __swig_setmethods__ = {}
    for _s in [PopulationParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PopulationBottleneck, name, value)
    __swig_getmethods__ = {}
    for _s in [PopulationParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PopulationBottleneck, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::PopulationBottleneck self, double date, unsigned int population, double value) -> PopulationBottleneck"""
        this = _egglib_binding.new_PopulationBottleneck(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(PopulationBottleneck self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.PopulationBottleneck_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_PopulationBottleneck
    __del__ = lambda self : None;
PopulationBottleneck_swigregister = _egglib_binding.PopulationBottleneck_swigregister
PopulationBottleneck_swigregister(PopulationBottleneck)

class AllPopulationSizeChange(SingleParamChange):
    """Proxy of C++ egglib::AllPopulationSizeChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllPopulationSizeChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllPopulationSizeChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::AllPopulationSizeChange self, double date, double value) -> AllPopulationSizeChange"""
        this = _egglib_binding.new_AllPopulationSizeChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(AllPopulationSizeChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.AllPopulationSizeChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_AllPopulationSizeChange
    __del__ = lambda self : None;
AllPopulationSizeChange_swigregister = _egglib_binding.AllPopulationSizeChange_swigregister
AllPopulationSizeChange_swigregister(AllPopulationSizeChange)

class SinglePopulationSizeChange(PopulationParamChange):
    """Proxy of C++ egglib::SinglePopulationSizeChange class"""
    __swig_setmethods__ = {}
    for _s in [PopulationParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinglePopulationSizeChange, name, value)
    __swig_getmethods__ = {}
    for _s in [PopulationParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SinglePopulationSizeChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::SinglePopulationSizeChange self, double date, unsigned int population, double value) -> SinglePopulationSizeChange"""
        this = _egglib_binding.new_SinglePopulationSizeChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(SinglePopulationSizeChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.SinglePopulationSizeChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_SinglePopulationSizeChange
    __del__ = lambda self : None;
SinglePopulationSizeChange_swigregister = _egglib_binding.SinglePopulationSizeChange_swigregister
SinglePopulationSizeChange_swigregister(SinglePopulationSizeChange)

class GrowthRateChange(SingleParamChange):
    """Proxy of C++ egglib::GrowthRateChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrowthRateChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GrowthRateChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::GrowthRateChange self, double date, double value) -> GrowthRateChange"""
        this = _egglib_binding.new_GrowthRateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(GrowthRateChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.GrowthRateChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_GrowthRateChange
    __del__ = lambda self : None;
GrowthRateChange_swigregister = _egglib_binding.GrowthRateChange_swigregister
GrowthRateChange_swigregister(GrowthRateChange)

class PopulationGrowthRateChange(PopulationParamChange):
    """Proxy of C++ egglib::PopulationGrowthRateChange class"""
    __swig_setmethods__ = {}
    for _s in [PopulationParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PopulationGrowthRateChange, name, value)
    __swig_getmethods__ = {}
    for _s in [PopulationParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PopulationGrowthRateChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::PopulationGrowthRateChange self, double date, unsigned int population, double value) -> PopulationGrowthRateChange"""
        this = _egglib_binding.new_PopulationGrowthRateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(PopulationGrowthRateChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.PopulationGrowthRateChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_PopulationGrowthRateChange
    __del__ = lambda self : None;
PopulationGrowthRateChange_swigregister = _egglib_binding.PopulationGrowthRateChange_swigregister
PopulationGrowthRateChange_swigregister(PopulationGrowthRateChange)

class SelfingRateChange(SingleParamChange):
    """Proxy of C++ egglib::SelfingRateChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SelfingRateChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SelfingRateChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::SelfingRateChange self, double date, double value) -> SelfingRateChange"""
        this = _egglib_binding.new_SelfingRateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(SelfingRateChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.SelfingRateChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_SelfingRateChange
    __del__ = lambda self : None;
SelfingRateChange_swigregister = _egglib_binding.SelfingRateChange_swigregister
SelfingRateChange_swigregister(SelfingRateChange)

class PopulationFusion(Change):
    """Proxy of C++ egglib::PopulationFusion class"""
    __swig_setmethods__ = {}
    for _s in [Change]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PopulationFusion, name, value)
    __swig_getmethods__ = {}
    for _s in [Change]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PopulationFusion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::PopulationFusion self) -> PopulationFusion
        __init__(egglib::PopulationFusion self, double date, unsigned int mother, unsigned int daughter) -> PopulationFusion
        """
        this = _egglib_binding.new_PopulationFusion(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(PopulationFusion self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.PopulationFusion_apply(self, *args)

    def daughter(self, *args):
        """
        daughter(PopulationFusion self, unsigned int arg2)
        daughter(PopulationFusion self) -> unsigned int
        """
        return _egglib_binding.PopulationFusion_daughter(self, *args)

    def mother(self, *args):
        """
        mother(PopulationFusion self, unsigned int arg2)
        mother(PopulationFusion self) -> unsigned int
        """
        return _egglib_binding.PopulationFusion_mother(self, *args)

    __swig_destroy__ = _egglib_binding.delete_PopulationFusion
    __del__ = lambda self : None;
PopulationFusion_swigregister = _egglib_binding.PopulationFusion_swigregister
PopulationFusion_swigregister(PopulationFusion)

class PopulationSplit(Change):
    """Proxy of C++ egglib::PopulationSplit class"""
    __swig_setmethods__ = {}
    for _s in [Change]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PopulationSplit, name, value)
    __swig_getmethods__ = {}
    for _s in [Change]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PopulationSplit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::PopulationSplit self) -> PopulationSplit
        __init__(egglib::PopulationSplit self, double date, unsigned int pop, double proba) -> PopulationSplit
        """
        this = _egglib_binding.new_PopulationSplit(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(PopulationSplit self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.PopulationSplit_apply(self, *args)

    def population(self, *args):
        """
        population(PopulationSplit self) -> unsigned int
        population(PopulationSplit self, unsigned int arg2)
        """
        return _egglib_binding.PopulationSplit_population(self, *args)

    def probability(self, *args):
        """
        probability(PopulationSplit self) -> double
        probability(PopulationSplit self, double arg2)
        """
        return _egglib_binding.PopulationSplit_probability(self, *args)

    __swig_destroy__ = _egglib_binding.delete_PopulationSplit
    __del__ = lambda self : None;
PopulationSplit_swigregister = _egglib_binding.PopulationSplit_swigregister
PopulationSplit_swigregister(PopulationSplit)

class AllMigrationRateChange(SingleParamChange):
    """Proxy of C++ egglib::AllMigrationRateChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllMigrationRateChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllMigrationRateChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(egglib::AllMigrationRateChange self, double date, double value) -> AllMigrationRateChange"""
        this = _egglib_binding.new_AllMigrationRateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args):
        """apply(AllMigrationRateChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.AllMigrationRateChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_AllMigrationRateChange
    __del__ = lambda self : None;
AllMigrationRateChange_swigregister = _egglib_binding.AllMigrationRateChange_swigregister
AllMigrationRateChange_swigregister(AllMigrationRateChange)

class SingleMigrationRateChange(SingleParamChange):
    """Proxy of C++ egglib::SingleMigrationRateChange class"""
    __swig_setmethods__ = {}
    for _s in [SingleParamChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleMigrationRateChange, name, value)
    __swig_getmethods__ = {}
    for _s in [SingleParamChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleMigrationRateChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(egglib::SingleMigrationRateChange self) -> SingleMigrationRateChange
        __init__(egglib::SingleMigrationRateChange self, double date, unsigned int source, unsigned int dest, double migr) -> SingleMigrationRateChange
        """
        this = _egglib_binding.new_SingleMigrationRateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def source(self, *args):
        """
        source(SingleMigrationRateChange self) -> unsigned int
        source(SingleMigrationRateChange self, unsigned int arg2)
        """
        return _egglib_binding.SingleMigrationRateChange_source(self, *args)

    def dest(self, *args):
        """
        dest(SingleMigrationRateChange self) -> unsigned int
        dest(SingleMigrationRateChange self, unsigned int arg2)
        """
        return _egglib_binding.SingleMigrationRateChange_dest(self, *args)

    def apply(self, *args):
        """apply(SingleMigrationRateChange self, ParamSet paramSet, Controller controller)"""
        return _egglib_binding.SingleMigrationRateChange_apply(self, *args)

    __swig_destroy__ = _egglib_binding.delete_SingleMigrationRateChange
    __del__ = lambda self : None;
SingleMigrationRateChange_swigregister = _egglib_binding.SingleMigrationRateChange_swigregister
SingleMigrationRateChange_swigregister(SingleMigrationRateChange)

class Mutator(_object):
    """Proxy of C++ egglib::Mutator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::Mutator self) -> Mutator"""
        this = _egglib_binding.new_Mutator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_Mutator
    __del__ = lambda self : None;
    def reset(self):
        """reset(Mutator self)"""
        return _egglib_binding.Mutator_reset(self)

    def fixedNumberOfMutations(self, *args):
        """
        fixedNumberOfMutations(Mutator self) -> unsigned int
        fixedNumberOfMutations(Mutator self, unsigned int arg2)
        """
        return _egglib_binding.Mutator_fixedNumberOfMutations(self, *args)

    def mutationRate(self, *args):
        """
        mutationRate(Mutator self) -> double
        mutationRate(Mutator self, double arg2)
        """
        return _egglib_binding.Mutator_mutationRate(self, *args)

    def mutationModel(self, *args):
        """
        mutationModel(Mutator self) -> char
        mutationModel(Mutator self, char arg2)
        """
        return _egglib_binding.Mutator_mutationModel(self, *args)

    def numberOfAlleles(self, *args):
        """
        numberOfAlleles(Mutator self) -> unsigned int
        numberOfAlleles(Mutator self, unsigned int arg2)
        """
        return _egglib_binding.Mutator_numberOfAlleles(self, *args)

    def transitionWeight(self, *args):
        """
        transitionWeight(Mutator self, unsigned int i, unsigned int j, double value)
        transitionWeight(Mutator self, unsigned int i, unsigned int j) -> double
        """
        return _egglib_binding.Mutator_transitionWeight(self, *args)

    def randomAncestralAllele(self, *args):
        """
        randomAncestralAllele(Mutator self, bool flag)
        randomAncestralAllele(Mutator self) -> bool
        """
        return _egglib_binding.Mutator_randomAncestralAllele(self, *args)

    def TPMproba(self, *args):
        """
        TPMproba(Mutator self) -> double
        TPMproba(Mutator self, double value)
        """
        return _egglib_binding.Mutator_TPMproba(self, *args)

    def TPMparam(self, *args):
        """
        TPMparam(Mutator self) -> double
        TPMparam(Mutator self, double value)
        """
        return _egglib_binding.Mutator_TPMparam(self, *args)

    def numberOfSites(self, *args):
        """
        numberOfSites(Mutator self) -> unsigned int
        numberOfSites(Mutator self, unsigned int arg2)
        """
        return _egglib_binding.Mutator_numberOfSites(self, *args)

    def sitePosition(self, *args):
        """
        sitePosition(Mutator self, unsigned int siteIndex) -> double
        sitePosition(Mutator self, unsigned int siteIndex, double position)
        """
        return _egglib_binding.Mutator_sitePosition(self, *args)

    def siteWeight(self, *args):
        """
        siteWeight(Mutator self, unsigned int siteIndex) -> double
        siteWeight(Mutator self, unsigned int siteIndex, double weight)
        """
        return _egglib_binding.Mutator_siteWeight(self, *args)

    def mute(self, *args):
        """mute(Mutator self, Arg arg, Random random) -> DataMatrix"""
        return _egglib_binding.Mutator_mute(self, *args)

    def numberOfMutations(self):
        """numberOfMutations(Mutator self) -> unsigned int"""
        return _egglib_binding.Mutator_numberOfMutations(self)

Mutator_swigregister = _egglib_binding.Mutator_swigregister
Mutator_swigregister(Mutator)

class SitePolymorphism(_object):
    """Proxy of C++ egglib::SitePolymorphism class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SitePolymorphism, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SitePolymorphism, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _egglib_binding.delete_SitePolymorphism
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(egglib::SitePolymorphism self) -> SitePolymorphism
        __init__(egglib::SitePolymorphism self, unsigned int npop) -> SitePolymorphism
        __init__(egglib::SitePolymorphism self, SitePolymorphism source) -> SitePolymorphism
        """
        this = _egglib_binding.new_SitePolymorphism(*args)
        try: self.this.append(this)
        except: self.this = this
    def numberOfPopulations(self, *args):
        """numberOfPopulations(SitePolymorphism self, unsigned int npop)"""
        return _egglib_binding.SitePolymorphism_numberOfPopulations(self, *args)

    def load(self, *args):
        """load(SitePolymorphism self, unsigned int populationIndex, char character)"""
        return _egglib_binding.SitePolymorphism_load(self, *args)

    def outgroup(self, *args):
        """outgroup(SitePolymorphism self, char state)"""
        return _egglib_binding.SitePolymorphism_outgroup(self, *args)

    def numberOfAlleles(self):
        """numberOfAlleles(SitePolymorphism self) -> unsigned int"""
        return _egglib_binding.SitePolymorphism_numberOfAlleles(self)

    def allele(self, *args):
        """allele(SitePolymorphism self, unsigned int index) -> char"""
        return _egglib_binding.SitePolymorphism_allele(self, *args)

    def alleleFrequency(self, *args):
        """
        alleleFrequency(SitePolymorphism self, unsigned int alleleIndex) -> unsigned int
        alleleFrequency(SitePolymorphism self, unsigned int popIndex, unsigned int alleleIndex) -> unsigned int
        """
        return _egglib_binding.SitePolymorphism_alleleFrequency(self, *args)

    def derivedAlleleFrequency(self):
        """derivedAlleleFrequency(SitePolymorphism self) -> unsigned int"""
        return _egglib_binding.SitePolymorphism_derivedAlleleFrequency(self)

    def ns(self, *args):
        """
        ns(SitePolymorphism self) -> unsigned int
        ns(SitePolymorphism self, unsigned int popIndex) -> unsigned int
        """
        return _egglib_binding.SitePolymorphism_ns(self, *args)

    def isOrientable(self):
        """isOrientable(SitePolymorphism self) -> bool"""
        return _egglib_binding.SitePolymorphism_isOrientable(self)

    def isPolymorphic(self, *args):
        """isPolymorphic(SitePolymorphism self, unsigned int popIndex) -> bool"""
        return _egglib_binding.SitePolymorphism_isPolymorphic(self, *args)

    def hasSpecificAllele(self, *args):
        """hasSpecificAllele(SitePolymorphism self, unsigned int popIndex, bool restrictToDerived) -> bool"""
        return _egglib_binding.SitePolymorphism_hasSpecificAllele(self, *args)

    def haveFixedDifference(self, *args):
        """haveFixedDifference(SitePolymorphism self, unsigned int pop1, unsigned int pop2) -> bool"""
        return _egglib_binding.SitePolymorphism_haveFixedDifference(self, *args)

    def haveCommonAllele(self, *args):
        """haveCommonAllele(SitePolymorphism self, unsigned int pop1, unsigned int pop2) -> bool"""
        return _egglib_binding.SitePolymorphism_haveCommonAllele(self, *args)

    def haveSharedAllele(self, *args):
        """haveSharedAllele(SitePolymorphism self, unsigned int pop1, unsigned int pop2) -> bool"""
        return _egglib_binding.SitePolymorphism_haveSharedAllele(self, *args)

SitePolymorphism_swigregister = _egglib_binding.SitePolymorphism_swigregister
SitePolymorphism_swigregister(SitePolymorphism)

class BaseDiversity(_object):
    """Proxy of C++ egglib::BaseDiversity class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseDiversity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseDiversity, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::BaseDiversity self) -> BaseDiversity"""
        this = _egglib_binding.new_BaseDiversity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_BaseDiversity
    __del__ = lambda self : None;
    def reserve(self, *args):
        """reserve(BaseDiversity self, unsigned int numberOfSites)"""
        return _egglib_binding.BaseDiversity_reserve(self, *args)

    def reset(self):
        """reset(BaseDiversity self)"""
        return _egglib_binding.BaseDiversity_reset(self)

    def get_site(self, *args):
        """get_site(BaseDiversity self, unsigned int index) -> SitePolymorphism"""
        return _egglib_binding.BaseDiversity_get_site(self, *args)

    def get_position(self, *args):
        """get_position(BaseDiversity self, unsigned int index) -> unsigned int"""
        return _egglib_binding.BaseDiversity_get_position(self, *args)

BaseDiversity_swigregister = _egglib_binding.BaseDiversity_swigregister
BaseDiversity_swigregister(BaseDiversity)
cvar = _egglib_binding.cvar
BaseDiversity.dnaMapping = _egglib_binding.cvar.BaseDiversity_dnaMapping
BaseDiversity.rnaMapping = _egglib_binding.cvar.BaseDiversity_rnaMapping
BaseDiversity.aaMapping = _egglib_binding.cvar.BaseDiversity_aaMapping

class Consensus(_object):
    """Proxy of C++ egglib::Consensus class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Consensus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Consensus, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::Consensus self) -> Consensus"""
        this = _egglib_binding.new_Consensus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_Consensus
    __del__ = lambda self : None;
    def setMissing(self, *args):
        """setMissing(Consensus self, char arg2)"""
        return _egglib_binding.Consensus_setMissing(self, *args)

    def setDisagreement(self, *args):
        """setDisagreement(Consensus self, char arg2)"""
        return _egglib_binding.Consensus_setDisagreement(self, *args)

    def check_sequences(self, *args):
        """check_sequences(Consensus self, Align align) -> bool"""
        return _egglib_binding.Consensus_check_sequences(self, *args)

    def consensus(self, *args):
        """
        consensus(Consensus self, Align align, char separator='_', bool rigorous=True) -> Align
        consensus(Consensus self, Align align, char separator='_') -> Align
        consensus(Consensus self, Align align) -> Align
        """
        return _egglib_binding.Consensus_consensus(self, *args)

    def firstSequenceNames(self):
        """firstSequenceNames(Consensus self) -> vectors"""
        return _egglib_binding.Consensus_firstSequenceNames(self)

    def secondSequenceNames(self):
        """secondSequenceNames(Consensus self) -> vectors"""
        return _egglib_binding.Consensus_secondSequenceNames(self)

    def roots(self):
        """roots(Consensus self) -> vectors"""
        return _egglib_binding.Consensus_roots(self)

    def consistentPositions(self):
        """consistentPositions(Consensus self) -> vectori"""
        return _egglib_binding.Consensus_consistentPositions(self)

    def complementaryPositions(self):
        """complementaryPositions(Consensus self) -> vectori"""
        return _egglib_binding.Consensus_complementaryPositions(self)

    def uninformativePositions(self):
        """uninformativePositions(Consensus self) -> vectori"""
        return _egglib_binding.Consensus_uninformativePositions(self)

    def ambiguousPositions(self):
        """ambiguousPositions(Consensus self) -> vectori"""
        return _egglib_binding.Consensus_ambiguousPositions(self)

    def atLeastPartiallyResolvedAmbiguities(self):
        """atLeastPartiallyResolvedAmbiguities(Consensus self) -> vectori"""
        return _egglib_binding.Consensus_atLeastPartiallyResolvedAmbiguities(self)

    def inconsistentPositions(self):
        """inconsistentPositions(Consensus self) -> vectorvi"""
        return _egglib_binding.Consensus_inconsistentPositions(self)

Consensus_swigregister = _egglib_binding.Consensus_swigregister
Consensus_swigregister(Consensus)

class FStatistics(_object):
    """Proxy of C++ egglib::FStatistics class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FStatistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::FStatistics self) -> FStatistics"""
        this = _egglib_binding.new_FStatistics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_FStatistics
    __del__ = lambda self : None;
    def reserve(self, *args):
        """reserve(FStatistics self, unsigned int numberOfIndividuals)"""
        return _egglib_binding.FStatistics_reserve(self, *args)

    def loadIndividual(self, *args):
        """loadIndividual(FStatistics self, unsigned int genotype1, unsigned int genotype2, unsigned int populationLabel)"""
        return _egglib_binding.FStatistics_loadIndividual(self, *args)

    def populationLabel(self, *args):
        """populationLabel(FStatistics self, unsigned int populationIndex) -> unsigned int"""
        return _egglib_binding.FStatistics_populationLabel(self, *args)

    def alleleValue(self, *args):
        """alleleValue(FStatistics self, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.FStatistics_alleleValue(self, *args)

    def numberOfAlleles(self):
        """numberOfAlleles(FStatistics self) -> unsigned int"""
        return _egglib_binding.FStatistics_numberOfAlleles(self)

    def numberOfPopulations(self):
        """numberOfPopulations(FStatistics self) -> unsigned int"""
        return _egglib_binding.FStatistics_numberOfPopulations(self)

    def numberOfGenotypes(self):
        """numberOfGenotypes(FStatistics self) -> unsigned int"""
        return _egglib_binding.FStatistics_numberOfGenotypes(self)

    def alleleFrequencyTotal(self, *args):
        """alleleFrequencyTotal(FStatistics self, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.FStatistics_alleleFrequencyTotal(self, *args)

    def alleleFrequencyPerPopulation(self, *args):
        """alleleFrequencyPerPopulation(FStatistics self, unsigned int populationIndex, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.FStatistics_alleleFrequencyPerPopulation(self, *args)

    def genotypeFrequencyTotal(self, *args):
        """genotypeFrequencyTotal(FStatistics self, unsigned int alleleIndex1, unsigned int alleleIndex2) -> unsigned int"""
        return _egglib_binding.FStatistics_genotypeFrequencyTotal(self, *args)

    def genotypeFrequencyPerPopulation(self, *args):
        """genotypeFrequencyPerPopulation(FStatistics self, unsigned int populationIndex, unsigned int alleleIndex1, unsigned int alleleIndex2) -> unsigned int"""
        return _egglib_binding.FStatistics_genotypeFrequencyPerPopulation(self, *args)

    def populationFrequency(self, *args):
        """populationFrequency(FStatistics self, unsigned int populationIndex) -> unsigned int"""
        return _egglib_binding.FStatistics_populationFrequency(self, *args)

    def F(self):
        """F(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_F(self)

    def theta(self):
        """theta(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_theta(self)

    def f(self):
        """f(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_f(self)

    def Vpopulation(self):
        """Vpopulation(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_Vpopulation(self)

    def Vindividual(self):
        """Vindividual(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_Vindividual(self)

    def Vallele(self):
        """Vallele(FStatistics self) -> double"""
        return _egglib_binding.FStatistics_Vallele(self)

FStatistics_swigregister = _egglib_binding.FStatistics_swigregister
FStatistics_swigregister(FStatistics)

class HFStatistics(_object):
    """Proxy of C++ egglib::HFStatistics class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HFStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HFStatistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::HFStatistics self) -> HFStatistics"""
        this = _egglib_binding.new_HFStatistics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_HFStatistics
    __del__ = lambda self : None;
    def reserve(self, *args):
        """reserve(HFStatistics self, unsigned int numberOfIndividuals)"""
        return _egglib_binding.HFStatistics_reserve(self, *args)

    def loadIndividual(self, *args):
        """loadIndividual(HFStatistics self, unsigned int genotype, unsigned int populationLabel)"""
        return _egglib_binding.HFStatistics_loadIndividual(self, *args)

    def populationLabel(self, *args):
        """populationLabel(HFStatistics self, unsigned int populationIndex) -> unsigned int"""
        return _egglib_binding.HFStatistics_populationLabel(self, *args)

    def alleleValue(self, *args):
        """alleleValue(HFStatistics self, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.HFStatistics_alleleValue(self, *args)

    def numberOfAlleles(self):
        """numberOfAlleles(HFStatistics self) -> unsigned int"""
        return _egglib_binding.HFStatistics_numberOfAlleles(self)

    def numberOfPopulations(self):
        """numberOfPopulations(HFStatistics self) -> unsigned int"""
        return _egglib_binding.HFStatistics_numberOfPopulations(self)

    def numberOfGenotypes(self):
        """numberOfGenotypes(HFStatistics self) -> unsigned int"""
        return _egglib_binding.HFStatistics_numberOfGenotypes(self)

    def alleleFrequencyTotal(self, *args):
        """alleleFrequencyTotal(HFStatistics self, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.HFStatistics_alleleFrequencyTotal(self, *args)

    def alleleFrequencyPerPopulation(self, *args):
        """alleleFrequencyPerPopulation(HFStatistics self, unsigned int populationIndex, unsigned int alleleIndex) -> unsigned int"""
        return _egglib_binding.HFStatistics_alleleFrequencyPerPopulation(self, *args)

    def populationFrequency(self, *args):
        """populationFrequency(HFStatistics self, unsigned int populationIndex) -> unsigned int"""
        return _egglib_binding.HFStatistics_populationFrequency(self, *args)

    def theta(self):
        """theta(HFStatistics self) -> double"""
        return _egglib_binding.HFStatistics_theta(self)

    def T1(self):
        """T1(HFStatistics self) -> double"""
        return _egglib_binding.HFStatistics_T1(self)

    def T2(self):
        """T2(HFStatistics self) -> double"""
        return _egglib_binding.HFStatistics_T2(self)

HFStatistics_swigregister = _egglib_binding.HFStatistics_swigregister
HFStatistics_swigregister(HFStatistics)

class HaplotypeDiversity(BaseDiversity):
    """Proxy of C++ egglib::HaplotypeDiversity class"""
    __swig_setmethods__ = {}
    for _s in [BaseDiversity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaplotypeDiversity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDiversity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaplotypeDiversity, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::HaplotypeDiversity self) -> HaplotypeDiversity"""
        this = _egglib_binding.new_HaplotypeDiversity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_HaplotypeDiversity
    __del__ = lambda self : None;
    def load(self, *args):
        """
        load(HaplotypeDiversity self, CharMatrix data, bool allowMultipleMutations=False, unsigned int ignoreFrequency=0, 
            std::string characterMapping=dnaMapping)
        load(HaplotypeDiversity self, CharMatrix data, bool allowMultipleMutations=False, unsigned int ignoreFrequency=0)
        load(HaplotypeDiversity self, CharMatrix data, bool allowMultipleMutations=False)
        load(HaplotypeDiversity self, CharMatrix data)
        """
        return _egglib_binding.HaplotypeDiversity_load(self, *args)

    def K(self):
        """K(HaplotypeDiversity self) -> unsigned int"""
        return _egglib_binding.HaplotypeDiversity_K(self)

    def He(self):
        """He(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_He(self)

    def haplotypeIndex(self, *args):
        """haplotypeIndex(HaplotypeDiversity self, unsigned int arg2) -> unsigned int"""
        return _egglib_binding.HaplotypeDiversity_haplotypeIndex(self, *args)

    def Kst(self):
        """Kst(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_Kst(self)

    def Fst(self):
        """Fst(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_Fst(self)

    def Gst(self):
        """Gst(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_Gst(self)

    def Hst(self):
        """Hst(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_Hst(self)

    def Snn(self):
        """Snn(HaplotypeDiversity self) -> double"""
        return _egglib_binding.HaplotypeDiversity_Snn(self)

HaplotypeDiversity_swigregister = _egglib_binding.HaplotypeDiversity_swigregister
HaplotypeDiversity_swigregister(HaplotypeDiversity)

class LinkageDisequilibrium(BaseDiversity):
    """Proxy of C++ egglib::LinkageDisequilibrium class"""
    __swig_setmethods__ = {}
    for _s in [BaseDiversity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkageDisequilibrium, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDiversity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinkageDisequilibrium, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::LinkageDisequilibrium self) -> LinkageDisequilibrium"""
        this = _egglib_binding.new_LinkageDisequilibrium()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_LinkageDisequilibrium
    __del__ = lambda self : None;
    def load(self, *args):
        """
        load(LinkageDisequilibrium self, CharMatrix data, double minimumExploitableData=1., unsigned int ignoreFrequency=0, 
            std::string characterMapping=dnaMapping)
        load(LinkageDisequilibrium self, CharMatrix data, double minimumExploitableData=1., unsigned int ignoreFrequency=0)
        load(LinkageDisequilibrium self, CharMatrix data, double minimumExploitableData=1.)
        load(LinkageDisequilibrium self, CharMatrix data)
        """
        return _egglib_binding.LinkageDisequilibrium_load(self, *args)

    def numberOfPairs(self):
        """numberOfPairs(LinkageDisequilibrium self) -> unsigned int"""
        return _egglib_binding.LinkageDisequilibrium_numberOfPairs(self)

    def d(self, *args):
        """d(LinkageDisequilibrium self, unsigned int pair_index) -> int"""
        return _egglib_binding.LinkageDisequilibrium_d(self, *args)

    def D(self, *args):
        """D(LinkageDisequilibrium self, unsigned int pair_index) -> double"""
        return _egglib_binding.LinkageDisequilibrium_D(self, *args)

    def Dp(self, *args):
        """Dp(LinkageDisequilibrium self, unsigned int pair_index) -> double"""
        return _egglib_binding.LinkageDisequilibrium_Dp(self, *args)

    def r(self, *args):
        """r(LinkageDisequilibrium self, unsigned int pair_index) -> double"""
        return _egglib_binding.LinkageDisequilibrium_r(self, *args)

    def r2(self, *args):
        """r2(LinkageDisequilibrium self, unsigned int pair_index) -> double"""
        return _egglib_binding.LinkageDisequilibrium_r2(self, *args)

    def site1(self, *args):
        """site1(LinkageDisequilibrium self, unsigned int pair_index) -> unsigned int"""
        return _egglib_binding.LinkageDisequilibrium_site1(self, *args)

    def site2(self, *args):
        """site2(LinkageDisequilibrium self, unsigned int pair_index) -> unsigned int"""
        return _egglib_binding.LinkageDisequilibrium_site2(self, *args)

    def correl(self):
        """correl(LinkageDisequilibrium self) -> double"""
        return _egglib_binding.LinkageDisequilibrium_correl(self)

    def Rmin(self, *args):
        """Rmin(LinkageDisequilibrium self, CharMatrix data) -> unsigned int"""
        return _egglib_binding.LinkageDisequilibrium_Rmin(self, *args)

LinkageDisequilibrium_swigregister = _egglib_binding.LinkageDisequilibrium_swigregister
LinkageDisequilibrium_swigregister(LinkageDisequilibrium)

class MicrosatelliteDiversity(_object):
    """Proxy of C++ egglib::MicrosatelliteDiversity class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MicrosatelliteDiversity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MicrosatelliteDiversity, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::MicrosatelliteDiversity self) -> MicrosatelliteDiversity"""
        this = _egglib_binding.new_MicrosatelliteDiversity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_MicrosatelliteDiversity
    __del__ = lambda self : None;
    def load(self, *args):
        """
        load(MicrosatelliteDiversity self, DataMatrix dataMatrix, int missingData=999, bool noMissingData=False)
        load(MicrosatelliteDiversity self, DataMatrix dataMatrix, int missingData=999)
        load(MicrosatelliteDiversity self, DataMatrix dataMatrix)
        """
        return _egglib_binding.MicrosatelliteDiversity_load(self, *args)

    def numberOfSites(self):
        """numberOfSites(MicrosatelliteDiversity self) -> unsigned int"""
        return _egglib_binding.MicrosatelliteDiversity_numberOfSites(self)

    def He(self, *args):
        """He(MicrosatelliteDiversity self, unsigned int siteIndex) -> double"""
        return _egglib_binding.MicrosatelliteDiversity_He(self, *args)

    def numberOfAlleles(self, *args):
        """numberOfAlleles(MicrosatelliteDiversity self, unsigned int siteIndex) -> unsigned int"""
        return _egglib_binding.MicrosatelliteDiversity_numberOfAlleles(self, *args)

    def sizeVariance(self, *args):
        """sizeVariance(MicrosatelliteDiversity self, unsigned int siteIndex) -> double"""
        return _egglib_binding.MicrosatelliteDiversity_sizeVariance(self, *args)

    def thetaAssumingIAM(self, *args):
        """thetaAssumingIAM(MicrosatelliteDiversity self, unsigned int siteIndex) -> double"""
        return _egglib_binding.MicrosatelliteDiversity_thetaAssumingIAM(self, *args)

    def thetaAssumingSMMfromHe(self, *args):
        """thetaAssumingSMMfromHe(MicrosatelliteDiversity self, unsigned int siteIndex) -> double"""
        return _egglib_binding.MicrosatelliteDiversity_thetaAssumingSMMfromHe(self, *args)

    def thetaAssumingSMMfromSizeVariance(self, *args):
        """thetaAssumingSMMfromSizeVariance(MicrosatelliteDiversity self, unsigned int siteIndex) -> double"""
        return _egglib_binding.MicrosatelliteDiversity_thetaAssumingSMMfromSizeVariance(self, *args)

MicrosatelliteDiversity_swigregister = _egglib_binding.MicrosatelliteDiversity_swigregister
MicrosatelliteDiversity_swigregister(MicrosatelliteDiversity)

class NucleotideDiversity(BaseDiversity):
    """Proxy of C++ egglib::NucleotideDiversity class"""
    __swig_setmethods__ = {}
    for _s in [BaseDiversity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NucleotideDiversity, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDiversity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NucleotideDiversity, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(egglib::NucleotideDiversity self) -> NucleotideDiversity"""
        this = _egglib_binding.new_NucleotideDiversity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _egglib_binding.delete_NucleotideDiversity
    __del__ = lambda self : None;
    def load(self, *args):
        """
        load(NucleotideDiversity self, CharMatrix data, bool allowMultipleMutations=False, double minimumExploitableData=1., 
            unsigned int ignoreFrequency=0, std::string characterMapping=dnaMapping, 
            bool useZeroAsAncestral=False)
        load(NucleotideDiversity self, CharMatrix data, bool allowMultipleMutations=False, double minimumExploitableData=1., 
            unsigned int ignoreFrequency=0, std::string characterMapping=dnaMapping)
        load(NucleotideDiversity self, CharMatrix data, bool allowMultipleMutations=False, double minimumExploitableData=1., 
            unsigned int ignoreFrequency=0)
        load(NucleotideDiversity self, CharMatrix data, bool allowMultipleMutations=False, double minimumExploitableData=1.)
        load(NucleotideDiversity self, CharMatrix data, bool allowMultipleMutations=False)
        load(NucleotideDiversity self, CharMatrix data)
        """
        return _egglib_binding.NucleotideDiversity_load(self, *args)

    def S(self):
        """S(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_S(self)

    def So(self):
        """So(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_So(self)

    def eta(self):
        """eta(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_eta(self)

    def nseff(self):
        """nseff(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_nseff(self)

    def lseff(self):
        """lseff(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_lseff(self)

    def nseffo(self):
        """nseffo(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_nseffo(self)

    def lseffo(self):
        """lseffo(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_lseffo(self)

    def npop(self):
        """npop(NucleotideDiversity self) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_npop(self)

    def popLabel(self, *args):
        """popLabel(NucleotideDiversity self, unsigned int popIndex) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_popLabel(self, *args)

    def Pi(self):
        """Pi(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_Pi(self)

    def thetaW(self):
        """thetaW(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_thetaW(self)

    def average_Pi(self):
        """average_Pi(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_average_Pi(self)

    def pop_Pi(self, *args):
        """pop_Pi(NucleotideDiversity self, unsigned int popIndex) -> double"""
        return _egglib_binding.NucleotideDiversity_pop_Pi(self, *args)

    def D(self):
        """D(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_D(self)

    def thetaH(self):
        """thetaH(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_thetaH(self)

    def thetaL(self):
        """thetaL(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_thetaL(self)

    def H(self):
        """H(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_H(self)

    def Z(self):
        """Z(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_Z(self)

    def E(self):
        """E(NucleotideDiversity self) -> double"""
        return _egglib_binding.NucleotideDiversity_E(self)

    def Polymorphisms(self, *args):
        """Polymorphisms(NucleotideDiversity self, unsigned int pop) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_Polymorphisms(self, *args)

    def SpecificAlleles(self, *args):
        """
        SpecificAlleles(NucleotideDiversity self) -> unsigned int
        SpecificAlleles(NucleotideDiversity self, unsigned int pop) -> unsigned int
        """
        return _egglib_binding.NucleotideDiversity_SpecificAlleles(self, *args)

    def SpecificDerivedAlleles(self, *args):
        """
        SpecificDerivedAlleles(NucleotideDiversity self) -> unsigned int
        SpecificDerivedAlleles(NucleotideDiversity self, unsigned int pop) -> unsigned int
        """
        return _egglib_binding.NucleotideDiversity_SpecificDerivedAlleles(self, *args)

    def FixedDifferences(self, *args):
        """
        FixedDifferences(NucleotideDiversity self) -> unsigned int
        FixedDifferences(NucleotideDiversity self, unsigned int pop1, unsigned int pop2) -> unsigned int
        """
        return _egglib_binding.NucleotideDiversity_FixedDifferences(self, *args)

    def CommonAlleles(self, *args):
        """
        CommonAlleles(NucleotideDiversity self) -> unsigned int
        CommonAlleles(NucleotideDiversity self, unsigned int pop1, unsigned int pop2) -> unsigned int
        """
        return _egglib_binding.NucleotideDiversity_CommonAlleles(self, *args)

    def SharedAlleles(self, *args):
        """
        SharedAlleles(NucleotideDiversity self) -> unsigned int
        SharedAlleles(NucleotideDiversity self, unsigned int pop1, unsigned int pop2) -> unsigned int
        """
        return _egglib_binding.NucleotideDiversity_SharedAlleles(self, *args)

    def triConfiguration(self, *args):
        """triConfiguration(NucleotideDiversity self, unsigned int index) -> unsigned int"""
        return _egglib_binding.NucleotideDiversity_triConfiguration(self, *args)

    def polymorphic_positions(self):
        """polymorphic_positions(NucleotideDiversity self) -> vectorui"""
        return _egglib_binding.NucleotideDiversity_polymorphic_positions(self)

    def singleton_positions(self):
        """singleton_positions(NucleotideDiversity self) -> vectorui"""
        return _egglib_binding.NucleotideDiversity_singleton_positions(self)

NucleotideDiversity_swigregister = _egglib_binding.NucleotideDiversity_swigregister
NucleotideDiversity_swigregister(NucleotideDiversity)

# This file is compatible with both classic and new-style classes.


